{"version":3,"sources":["../../src/pages/home/home.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/providers/auth/auth.ts","../../src/providers/event/event.ts","../../src/providers/profile/profile.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  constructor(public navCtrl: NavController) {}\n\n  goToProfile():void { this.navCtrl.push('ProfilePage') }\n  \n  goToCreate():void { this.navCtrl.push('EventCreatePage') }\n\n  goToList():void { this.navCtrl.push('EventListPage') }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 153;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 153\n// module chunks = 7","var map = {\n\t\"../pages/event-create/event-create.module\": [\n\t\t414,\n\t\t6\n\t],\n\t\"../pages/event-detail/event-detail.module\": [\n\t\t415,\n\t\t5\n\t],\n\t\"../pages/event-list/event-list.module\": [\n\t\t416,\n\t\t4\n\t],\n\t\"../pages/login/login.module\": [\n\t\t417,\n\t\t2\n\t],\n\t\"../pages/profile/profile.module\": [\n\t\t418,\n\t\t3\n\t],\n\t\"../pages/reset-password/reset-password.module\": [\n\t\t419,\n\t\t1\n\t],\n\t\"../pages/signup/signup.module\": [\n\t\t420,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 194;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 194\n// module chunks = 7","import { Injectable } from '@angular/core';\nimport firebase from 'firebase';\n\n@Injectable()\nexport class AuthProvider {\nconstructor() {}\n\n  // The loginUser method takes an email and a password and logs in the user.\n  // If the function has an error, it will return the error code and message  \n  // If the function goes through, the user will log in, Firebase will store the authentication object in localStorage, and the function will return the user to a promise.\n\n  loginUser(email:string, password:string):firebase.Promise<any> {\n    return firebase.auth().signInWithEmailAndPassword(email, password);\n  }\n\n  // creating a user does not store its information inside the database, it just stores it in the authentication module of our app, so we need to copy that information inside the database manually.\n  // after it creates the user, the app also logs the user in automatically meaning we do not have to call the login function again.\n  // The function returns a Promise that will run some code for us when it’s done creating the new user and login him into the app:\n  // It starts with a reference to the userProfile node inside our database.\n  // and creates a new node inside the userProfile node, and the UID identifies the node, the UID is Firebase automatic id generated for the user \n  // Also, it is adding a property to that node called email, filling it with the new user’s email address.\n\n  signupUser(email:string, password:string):firebase.Promise<any> {\n    return firebase.auth().createUserWithEmailAndPassword(email, password)\n      .then( newUser => {\n          firebase.database().ref(`/userProfile/${newUser.uid}/email`).set(email)\n      }).catch( error => console.error(error) );\n  }\n\n  // a function to let our users reset their passwords when they cannot remember them.\n  // even tho it does return a Promise, the promise is empty, so you mainly use it to perform other actions once it sends the password reset link.\n  // And Firebase will take care of the reset login. They send an email to your user with a password reset link, the user follows it and changes his password \n  resetPassword(email:string):firebase.Promise<void> {\n    return firebase.auth().sendPasswordResetEmail(email);\n  }\n\n  // logout fntion also returns a void promise. You will mainly use it to move the user to a different page (probably to LoginPage).\n  // there’s one thing people struggle with when logging out, sometimes the app is still listening to the database references, and it creates errors when your security rules are set up, for that, we just need to turn the reference off before logging out.\n  logoutUser():firebase.Promise<void> {\n    const userId:string = firebase.auth().currentUser.uid;\n    firebase.database().ref(`/userProfile/${userId}`).off();\n    return firebase.auth().signOut();\n  }\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/auth/auth.ts","import { Injectable } from '@angular/core';\nimport firebase from 'firebase';\n\n@Injectable()\nexport class EventProvider {\n  public eventListRef:firebase.database.Reference;\n\n  constructor() {\n    firebase.auth().onAuthStateChanged( user => {\n      if(user){\n        this.eventListRef = firebase.database().ref(`/userProfile/${user.uid}/eventList`);\n      }\n    });\n  }\n\n  getEventList():firebase.database.Reference {\n    return this.eventListRef;\n  }\n\n  getEventDetail(eventId:string):firebase.database.Reference {\n    return this.eventListRef.child(eventId);\n  }\n\n  createEvent(eventName:string, eventDate:string, eventPrice:number, eventCost:number):\n  firebase.Promise<any> {\n    return this.eventListRef.push({\n      name: eventName,\n      date: eventDate,\n      price: eventPrice * 1,\n      cost: eventCost * 1,\n      revenue: eventCost * -1\n    });\n  }\n\n  addGuest(guestName:string, eventId:string, eventPrice:number, guestPicture:string = null):\n  firebase.Promise<any> {\n    return this.eventListRef.child(`${eventId}/guestList`).push({ guestName })\n      .then( newGuest => {\n        this.eventListRef.child(eventId).transaction( event => {\n          event.revenue += eventPrice;\n          return event;\n        });\n        if(guestPicture != null){\n          firebase.storage().ref(`/guestProfile/${newGuest.key}/profilePicture.png`)\n            .putString(guestPicture, 'base64', {contentType: 'image/png'})\n            .then( savedPicture => {\n              this.eventListRef.child(`${eventId}/guestList/${newGuest.key}/profilePicture`)\n              .set(savedPicture.downloadURL);\n            });\n        }\n      });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/event/event.ts","import { Injectable } from '@angular/core';\nimport firebase from 'firebase';\n\n@Injectable()\nexport class ProfileProvider {\n  public userProfile:firebase.database.Reference;\n  public currentUser:firebase.User;\n\n  constructor() {\n    firebase.auth().onAuthStateChanged( user => {\n      if(user){\n        this.currentUser = user;\n        this.userProfile = firebase.database().ref(`/userProfile/${user.uid}`);\n      }\n    });\n  }\n\n  getUserProfile():firebase.database.Reference {\n    return this.userProfile;\n  }\n\n  updateName(firstName:string, lastName:string):firebase.Promise<any> {\n\n    // We’re using .update() here because we only want to update the firstName and lastName properties, if we were to use .set() to write to the database, it would delete everything under the user’s profile and replace it with the first and last name. .update() also returns a promise, but it is void, meaning it has nothing inside, so you use it just to see when the operation was completed and then perform something else.\n\n    return this.userProfile.update({ firstName, lastName });\n  }\n\n  updateDOB(birthDate:string):firebase.Promise<any> {\n    return this.userProfile.update({ birthDate });\n  }\n\n  // TODO provide functions for other profile information in addition to DOB here.\n\n  //Now is where things get a little trickier, we are going to change the user’s email address, why is it tricky? Because we are not only going to alter the email from the database, we are going to change it from the authentication service too. That means that we are changing the email the user uses to log into our app, and you cannot just call the change email function and have it magically work. This is because some security-sensitive actions (deleting an account, setting a primary email ad- dress, and changing a password) require that the user has recently signed-in. If you perform one of these actions, and the user signed in too long ago, the operation fails with an error. When this happens, re-authenticate the user by getting new sign-in credentials from the user and passing the credentials to reauthenticate.\n\n  updateEmail(newEmail:string, password:string):firebase.Promise<any> {\n    \n    // We are using firebase.auth.EmailAuthProvider.credential(); to create a credential object, Firebase uses this for authentication.\n\n    const credential = firebase.auth.EmailAuthProvider.credential(this.currentUser.email, password);\n\n    // We are passing that credential object to the re-authenticate function to make sure the user trying to change the email is the actual user who owns the account. After the re-authenticate function is completed we’re calling .updateEmail() and passing the new email address.  After the user’s email address is updated in the authentication service we proceed to call the profile reference from the database and also refresh the email there.\n\n    return this.currentUser.reauthenticateWithCredential(credential)\n    .then( user => {\n      this.currentUser.updateEmail(newEmail)\n      .then( user => {\n        this.userProfile.update({ email: newEmail });\n      });\n    }).catch( error => {\n      console.error(error); // TODO can we handle this better?\n    });\n  }\n\n  updatePassword(newPassword:string, oldPassword:string):firebase.Promise<any> {\n    const credential = firebase.auth.EmailAuthProvider\n      .credential(this.currentUser.email, oldPassword);\n\n    return this.currentUser.reauthenticateWithCredential(credential).then( user => {\n      this.currentUser.updatePassword(newPassword).then( user => {\n        console.log(\"Password Changed\"); // TODO can we handle this better?\n      });\n    }).catch( error => {\n      console.error(error); // TODO can we handle this better?\n    });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/profile/profile.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\n\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\nimport { AuthProvider } from '../providers/auth/auth';\nimport { EventProvider } from '../providers/event/event';\nimport { ProfileProvider } from '../providers/profile/profile';\nimport { Camera } from '@ionic-native/camera';\n\n// From book: plugins will not work in the browser, when using ionic serve, they only work on a real phone or an emulator. luckily, the new version of Ionic Native lets us, mock providers. We can create a “Mock” class while we are in development and every time we call the plugin it will use the mock class, for example: When you take a picture, the camera returns a base64 string we will use to upload to Firebase Storage and show the pictures We will create a CameraMock class that returns a base64 string of our choosing, that way when we are developing the app we do not need to worry about testing in the device, and that can give us speed. \n// TODO Don’t forget to remove it before deploying your app, that means to remove the CameraMock class and to change the providers array to use Camera instead of {provide: Camera, useClass: CameraMock},.\n\nclass CameraMock extends Camera { getPicture(options){\n  return new Promise( (resolve, reject) => { resolve(`TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIG\n  J1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3a GljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ug b2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmV\n  yYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2\n  YgYW55IGNhcm5hbCBwbGVhc3VyZS4=`); });\n  } }\n\n\n\n\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp, {}, \n{\n  links: [\n    { loadChildren: '../pages/event-create/event-create.module#EventCreatePageModule', name: 'EventCreatePage', segment: 'event-create', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/event-detail/event-detail.module#EventDetailPageModule', name: 'EventDetailPage', segment: 'event-detail/:eventId', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/event-list/event-list.module#EventListPageModule', name: 'EventListPage', segment: 'event-list', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/login/login.module#LoginPageModule', name: 'LoginPage', segment: 'login', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/profile/profile.module#ProfilePageModule', name: 'ProfilePage', segment: 'profile', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/reset-password/reset-password.module#ResetPasswordPageModule', name: 'ResetPasswordPage', segment: 'reset-password', priority: 'low', defaultHistory: [] },\n    { loadChildren: '../pages/signup/signup.module#SignupPageModule', name: 'SignupPage', segment: 'signup', priority: 'low', defaultHistory: [] }\n  ]\n})\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    AuthProvider,\n    EventProvider,\n    ProfileProvider,\n    // Camera,\n    {provide: Camera, useClass: CameraMock}\n  ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport firebase from 'firebase';\n\nimport { HomePage } from '../pages/home/home';\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  rootPage:any;\n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) {\n\n    firebase.initializeApp({\n      apiKey: \"AIzaSyDBUyiKkmGeafh6Xwxnh8_WuY4FfyD9GRU\",\n      authDomain: \"eventmanager-7bf03.firebaseapp.com\",\n      databaseURL: \"https://eventmanager-7bf03.firebaseio.com\",\n      projectId: \"eventmanager-7bf03\",\n      storageBucket: \"eventmanager-7bf03.appspot.com\",\n      messagingSenderId: \"487834407993\"\n    });\n\n    //  https://firebase.google.com/docs/reference/js/firebase.auth.Auth#onAuthStateChanged\n    // when you log in or signup using Firebase, it will store an auth object inside your localStorage.\n    // This object has information about the user’s profile, such as user’s email, name, ID, what kind of authentication used, among others. So the onAuthStateChanged() function looks for that object to see if a user already exists or not. If the user doesn’t exist, the user variable will be null, which will trigger the if statement and make the rootPage = 'LoginPage'.\n    // However, if there’s a user, it will return the user’s information, at that point the listener is going to send the user to the HomePage since the user should not need to re-login inside the app.\n    // The unsubscribe(); is because we are telling the function to call itself once it redirects the user,this is because the onAuthStateChanged() returns the unsubscribe function for the observer. Meaning it will stop listening to the authentication state unless you run it again (it runs every time someone opens the app).\n\n    const unsubscribe = firebase.auth().onAuthStateChanged( user => {\n      if(!user){\n        this.rootPage = 'LoginPage';\n        unsubscribe();\n      } else {\n        this.rootPage = HomePage;\n        unsubscribe();\n      }\n    });\n\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      statusBar.styleDefault();\n      splashScreen.hide();\n    });\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts"],"sourceRoot":""}